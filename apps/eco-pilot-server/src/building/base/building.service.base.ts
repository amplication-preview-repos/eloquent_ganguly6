/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Building as PrismaBuilding,
  EnergyConsumption as PrismaEnergyConsumption,
  HvacSystem as PrismaHvacSystem,
  Recommendation as PrismaRecommendation,
} from "@prisma/client";

export class BuildingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BuildingCountArgs, "select">): Promise<number> {
    return this.prisma.building.count(args);
  }

  async buildings(
    args: Prisma.BuildingFindManyArgs
  ): Promise<PrismaBuilding[]> {
    return this.prisma.building.findMany(args);
  }
  async building(
    args: Prisma.BuildingFindUniqueArgs
  ): Promise<PrismaBuilding | null> {
    return this.prisma.building.findUnique(args);
  }
  async createBuilding(
    args: Prisma.BuildingCreateArgs
  ): Promise<PrismaBuilding> {
    return this.prisma.building.create(args);
  }
  async updateBuilding(
    args: Prisma.BuildingUpdateArgs
  ): Promise<PrismaBuilding> {
    return this.prisma.building.update(args);
  }
  async deleteBuilding(
    args: Prisma.BuildingDeleteArgs
  ): Promise<PrismaBuilding> {
    return this.prisma.building.delete(args);
  }

  async findEnergyConsumptions(
    parentId: string,
    args: Prisma.EnergyConsumptionFindManyArgs
  ): Promise<PrismaEnergyConsumption[]> {
    return this.prisma.building
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .energyConsumptions(args);
  }

  async findHvacSystems(
    parentId: string,
    args: Prisma.HvacSystemFindManyArgs
  ): Promise<PrismaHvacSystem[]> {
    return this.prisma.building
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .hvacSystems(args);
  }

  async findRecommendations(
    parentId: string,
    args: Prisma.RecommendationFindManyArgs
  ): Promise<PrismaRecommendation[]> {
    return this.prisma.building
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recommendations(args);
  }
}
