/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EnergyConsumptionService } from "../energyConsumption.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EnergyConsumptionCreateInput } from "./EnergyConsumptionCreateInput";
import { EnergyConsumption } from "./EnergyConsumption";
import { EnergyConsumptionFindManyArgs } from "./EnergyConsumptionFindManyArgs";
import { EnergyConsumptionWhereUniqueInput } from "./EnergyConsumptionWhereUniqueInput";
import { EnergyConsumptionUpdateInput } from "./EnergyConsumptionUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EnergyConsumptionControllerBase {
  constructor(
    protected readonly service: EnergyConsumptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EnergyConsumption })
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEnergyConsumption(
    @common.Body() data: EnergyConsumptionCreateInput
  ): Promise<EnergyConsumption> {
    return await this.service.createEnergyConsumption({
      data: {
        ...data,

        building: data.building
          ? {
              connect: data.building,
            }
          : undefined,
      },
      select: {
        building: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        electricityUsage: true,
        gasUsage: true,
        id: true,
        updatedAt: true,
        waterUsage: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EnergyConsumption] })
  @ApiNestedQuery(EnergyConsumptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async energyConsumptions(
    @common.Req() request: Request
  ): Promise<EnergyConsumption[]> {
    const args = plainToClass(EnergyConsumptionFindManyArgs, request.query);
    return this.service.energyConsumptions({
      ...args,
      select: {
        building: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        electricityUsage: true,
        gasUsage: true,
        id: true,
        updatedAt: true,
        waterUsage: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EnergyConsumption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async energyConsumption(
    @common.Param() params: EnergyConsumptionWhereUniqueInput
  ): Promise<EnergyConsumption | null> {
    const result = await this.service.energyConsumption({
      where: params,
      select: {
        building: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        date: true,
        electricityUsage: true,
        gasUsage: true,
        id: true,
        updatedAt: true,
        waterUsage: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EnergyConsumption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEnergyConsumption(
    @common.Param() params: EnergyConsumptionWhereUniqueInput,
    @common.Body() data: EnergyConsumptionUpdateInput
  ): Promise<EnergyConsumption | null> {
    try {
      return await this.service.updateEnergyConsumption({
        where: params,
        data: {
          ...data,

          building: data.building
            ? {
                connect: data.building,
              }
            : undefined,
        },
        select: {
          building: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          electricityUsage: true,
          gasUsage: true,
          id: true,
          updatedAt: true,
          waterUsage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EnergyConsumption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEnergyConsumption(
    @common.Param() params: EnergyConsumptionWhereUniqueInput
  ): Promise<EnergyConsumption | null> {
    try {
      return await this.service.deleteEnergyConsumption({
        where: params,
        select: {
          building: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          date: true,
          electricityUsage: true,
          gasUsage: true,
          id: true,
          updatedAt: true,
          waterUsage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
