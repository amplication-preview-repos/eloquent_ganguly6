/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EnergyConsumption as PrismaEnergyConsumption,
  Building as PrismaBuilding,
} from "@prisma/client";

export class EnergyConsumptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EnergyConsumptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.energyConsumption.count(args);
  }

  async energyConsumptions(
    args: Prisma.EnergyConsumptionFindManyArgs
  ): Promise<PrismaEnergyConsumption[]> {
    return this.prisma.energyConsumption.findMany(args);
  }
  async energyConsumption(
    args: Prisma.EnergyConsumptionFindUniqueArgs
  ): Promise<PrismaEnergyConsumption | null> {
    return this.prisma.energyConsumption.findUnique(args);
  }
  async createEnergyConsumption(
    args: Prisma.EnergyConsumptionCreateArgs
  ): Promise<PrismaEnergyConsumption> {
    return this.prisma.energyConsumption.create(args);
  }
  async updateEnergyConsumption(
    args: Prisma.EnergyConsumptionUpdateArgs
  ): Promise<PrismaEnergyConsumption> {
    return this.prisma.energyConsumption.update(args);
  }
  async deleteEnergyConsumption(
    args: Prisma.EnergyConsumptionDeleteArgs
  ): Promise<PrismaEnergyConsumption> {
    return this.prisma.energyConsumption.delete(args);
  }

  async getBuilding(parentId: string): Promise<PrismaBuilding | null> {
    return this.prisma.energyConsumption
      .findUnique({
        where: { id: parentId },
      })
      .building();
  }
}
