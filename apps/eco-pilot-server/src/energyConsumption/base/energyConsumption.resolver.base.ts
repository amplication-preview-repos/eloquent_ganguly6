/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EnergyConsumption } from "./EnergyConsumption";
import { EnergyConsumptionCountArgs } from "./EnergyConsumptionCountArgs";
import { EnergyConsumptionFindManyArgs } from "./EnergyConsumptionFindManyArgs";
import { EnergyConsumptionFindUniqueArgs } from "./EnergyConsumptionFindUniqueArgs";
import { CreateEnergyConsumptionArgs } from "./CreateEnergyConsumptionArgs";
import { UpdateEnergyConsumptionArgs } from "./UpdateEnergyConsumptionArgs";
import { DeleteEnergyConsumptionArgs } from "./DeleteEnergyConsumptionArgs";
import { Building } from "../../building/base/Building";
import { EnergyConsumptionService } from "../energyConsumption.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EnergyConsumption)
export class EnergyConsumptionResolverBase {
  constructor(
    protected readonly service: EnergyConsumptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "read",
    possession: "any",
  })
  async _energyConsumptionsMeta(
    @graphql.Args() args: EnergyConsumptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EnergyConsumption])
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "read",
    possession: "any",
  })
  async energyConsumptions(
    @graphql.Args() args: EnergyConsumptionFindManyArgs
  ): Promise<EnergyConsumption[]> {
    return this.service.energyConsumptions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EnergyConsumption, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "read",
    possession: "own",
  })
  async energyConsumption(
    @graphql.Args() args: EnergyConsumptionFindUniqueArgs
  ): Promise<EnergyConsumption | null> {
    const result = await this.service.energyConsumption(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EnergyConsumption)
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "create",
    possession: "any",
  })
  async createEnergyConsumption(
    @graphql.Args() args: CreateEnergyConsumptionArgs
  ): Promise<EnergyConsumption> {
    return await this.service.createEnergyConsumption({
      ...args,
      data: {
        ...args.data,

        building: args.data.building
          ? {
              connect: args.data.building,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EnergyConsumption)
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "update",
    possession: "any",
  })
  async updateEnergyConsumption(
    @graphql.Args() args: UpdateEnergyConsumptionArgs
  ): Promise<EnergyConsumption | null> {
    try {
      return await this.service.updateEnergyConsumption({
        ...args,
        data: {
          ...args.data,

          building: args.data.building
            ? {
                connect: args.data.building,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EnergyConsumption)
  @nestAccessControl.UseRoles({
    resource: "EnergyConsumption",
    action: "delete",
    possession: "any",
  })
  async deleteEnergyConsumption(
    @graphql.Args() args: DeleteEnergyConsumptionArgs
  ): Promise<EnergyConsumption | null> {
    try {
      return await this.service.deleteEnergyConsumption(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Building, {
    nullable: true,
    name: "building",
  })
  @nestAccessControl.UseRoles({
    resource: "Building",
    action: "read",
    possession: "any",
  })
  async getBuilding(
    @graphql.Parent() parent: EnergyConsumption
  ): Promise<Building | null> {
    const result = await this.service.getBuilding(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
