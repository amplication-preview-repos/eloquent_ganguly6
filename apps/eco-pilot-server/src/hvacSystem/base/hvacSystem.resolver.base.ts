/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HvacSystem } from "./HvacSystem";
import { HvacSystemCountArgs } from "./HvacSystemCountArgs";
import { HvacSystemFindManyArgs } from "./HvacSystemFindManyArgs";
import { HvacSystemFindUniqueArgs } from "./HvacSystemFindUniqueArgs";
import { CreateHvacSystemArgs } from "./CreateHvacSystemArgs";
import { UpdateHvacSystemArgs } from "./UpdateHvacSystemArgs";
import { DeleteHvacSystemArgs } from "./DeleteHvacSystemArgs";
import { Building } from "../../building/base/Building";
import { HvacSystemService } from "../hvacSystem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HvacSystem)
export class HvacSystemResolverBase {
  constructor(
    protected readonly service: HvacSystemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HvacSystem",
    action: "read",
    possession: "any",
  })
  async _hvacSystemsMeta(
    @graphql.Args() args: HvacSystemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HvacSystem])
  @nestAccessControl.UseRoles({
    resource: "HvacSystem",
    action: "read",
    possession: "any",
  })
  async hvacSystems(
    @graphql.Args() args: HvacSystemFindManyArgs
  ): Promise<HvacSystem[]> {
    return this.service.hvacSystems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HvacSystem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HvacSystem",
    action: "read",
    possession: "own",
  })
  async hvacSystem(
    @graphql.Args() args: HvacSystemFindUniqueArgs
  ): Promise<HvacSystem | null> {
    const result = await this.service.hvacSystem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HvacSystem)
  @nestAccessControl.UseRoles({
    resource: "HvacSystem",
    action: "create",
    possession: "any",
  })
  async createHvacSystem(
    @graphql.Args() args: CreateHvacSystemArgs
  ): Promise<HvacSystem> {
    return await this.service.createHvacSystem({
      ...args,
      data: {
        ...args.data,

        building: args.data.building
          ? {
              connect: args.data.building,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HvacSystem)
  @nestAccessControl.UseRoles({
    resource: "HvacSystem",
    action: "update",
    possession: "any",
  })
  async updateHvacSystem(
    @graphql.Args() args: UpdateHvacSystemArgs
  ): Promise<HvacSystem | null> {
    try {
      return await this.service.updateHvacSystem({
        ...args,
        data: {
          ...args.data,

          building: args.data.building
            ? {
                connect: args.data.building,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HvacSystem)
  @nestAccessControl.UseRoles({
    resource: "HvacSystem",
    action: "delete",
    possession: "any",
  })
  async deleteHvacSystem(
    @graphql.Args() args: DeleteHvacSystemArgs
  ): Promise<HvacSystem | null> {
    try {
      return await this.service.deleteHvacSystem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Building, {
    nullable: true,
    name: "building",
  })
  @nestAccessControl.UseRoles({
    resource: "Building",
    action: "read",
    possession: "any",
  })
  async getBuilding(
    @graphql.Parent() parent: HvacSystem
  ): Promise<Building | null> {
    const result = await this.service.getBuilding(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
