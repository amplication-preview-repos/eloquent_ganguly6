/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  HvacSystem as PrismaHvacSystem,
  Building as PrismaBuilding,
} from "@prisma/client";

export class HvacSystemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HvacSystemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.hvacSystem.count(args);
  }

  async hvacSystems(
    args: Prisma.HvacSystemFindManyArgs
  ): Promise<PrismaHvacSystem[]> {
    return this.prisma.hvacSystem.findMany(args);
  }
  async hvacSystem(
    args: Prisma.HvacSystemFindUniqueArgs
  ): Promise<PrismaHvacSystem | null> {
    return this.prisma.hvacSystem.findUnique(args);
  }
  async createHvacSystem(
    args: Prisma.HvacSystemCreateArgs
  ): Promise<PrismaHvacSystem> {
    return this.prisma.hvacSystem.create(args);
  }
  async updateHvacSystem(
    args: Prisma.HvacSystemUpdateArgs
  ): Promise<PrismaHvacSystem> {
    return this.prisma.hvacSystem.update(args);
  }
  async deleteHvacSystem(
    args: Prisma.HvacSystemDeleteArgs
  ): Promise<PrismaHvacSystem> {
    return this.prisma.hvacSystem.delete(args);
  }

  async getBuilding(parentId: string): Promise<PrismaBuilding | null> {
    return this.prisma.hvacSystem
      .findUnique({
        where: { id: parentId },
      })
      .building();
  }
}
